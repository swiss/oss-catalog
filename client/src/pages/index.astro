---
import Layout from "../layouts/Layout.astro";
import SoftwareCard from "../components/SoftwareCard.astro";
import { type Lang, useTranslations } from "../i18n/utils";
import LinkButton from "../components/LinkButton.astro";
import orgEinheiten from "../../public/org-einheiten-bund.json";

const apiBaseUrl = import.meta.env.API_BASEURL || "http://localhost:3000/v1";
const response = await fetch(`${apiBaseUrl}/software?page[size]=10000`);
const data = await response.json();
const softwares = data.data;
const lang = Astro.currentLocale as Lang;
const t = useTranslations(Astro.currentLocale as Lang);
---

<Layout>
  <section class="section bg--secondary-50">
    <div class="container">
      <h1 class="section__title">{t("index.title")}</h1>
      <h2 class="section__subtitle">{t("index.subtitle")}</h2>

      <div class="card">
        <div class="card__body">
          {t("index.description")}
        </div>
      </div>
      <div class="section__action">
        <LinkButton
          href="https://swiss.github.io/publiccode-editor/"
          text={t("index.publiccode")}
        />
      </div>
    </div>
  </section>
  <section class="section section--default">
    <div class="container">
      <div class="form__group__select">
        <label for="organization-filter" class="text--base">
          {t("index.filter")}
        </label>
        <div class="select">
          <select
              id="organization-filter"
              class="input--outline input--base"
              name="organization-filter-name"
          >
            <option value="all">{t("index.filter.option.all")}</option>
            {
              orgEinheiten.map((org) => {
                return (
                    <option value={org.organization}>{org[lang] ?? org.de}</option>
                );
              })
            }
          </select>
          <div class="select__icon">
            <svg role="presentation" aria-hidden="true" viewBox="0 0 24 24">
              <path
                  d="m5.706 10.015 6.669 3.85 6.669-3.85.375.649-7.044 4.067-7.044-4.067z"
              ></path>
            </svg>
          </div>
        </div>
        <script>
          function handleOrgChange(event) {
            console.log("change event...");
            const selectedOrg = event.target.value;
            const cards = document.querySelectorAll(".card");
            cards.forEach((card) => {
              if (card.dataset.org === selectedOrg || selectedOrg === "all") {
                card.style.display = "flex";
              } else {
                card.style.display = "none";
              }
            });

            const visibleCards = Array.from(
              document.querySelectorAll(".card"),
            ).filter((el) => getComputedStyle(el).display === "flex");
            if (visibleCards.length === 0) {
              document.getElementById("no-results-message").style.display =
                "flex";
            } else {
              document.getElementById("no-results-message").style.display =
                "none";
            }
          }

          document
            .getElementById("organization-filter")
            .addEventListener("change", handleOrgChange);
        </script>
      </div>
    </div>
    <div class="container">
        <div class="grid grid--responsive-cols-3 gap--responsive">
            {softwares.map((software) => <SoftwareCard software={software} />)}
        </div>
        <div id="no-results-message" style="display: none">
            <p>{t("index.noresults")}</p>
        </div>
    </div>
  </section>
</Layout>
